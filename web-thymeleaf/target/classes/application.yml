server:
  port: 80
  #增加访问路劲
  #context-path: /web
  tomcat: 
    max-http-post-size: -1
    
    
spring:
  application:
    name: spring-boot-web-app
  #Spring Boot 1.4.x或者之后
  http: 
    multipart: 
      maxFileSize: 100Mb
      maxRequestSize: 1000Mb
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
    initialSize: 5
    minIdle: 5
    maxActive: 20
    maxWait: 60000
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    filters: stat,wall,log4j
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  jpa:
    properties:
      hibernate:
        hbm2ddl:
          #hibernate.hbm2ddl.auto参数的作用主要用于：自动创建|更新|验证数据库表结构,有四个值
          #create： 每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因
          #create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除
          #update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会
          #validate ：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值
          #none : 什么都不做
          auto: update
        #dialect 主要是指定生成表名的存储引擎为InneoDB
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
    show-sql: true
 

feign:
  hystrix:
    enabled: true

mybatis:
  config-locations: classpath:mybatis/mybatis-config.xml
  mapper-locations: classpath:mybatis/mapper/*.xml
  type-aliases-package: com.daimeng